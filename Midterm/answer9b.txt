
randQuicksort(A, p, r)
	if (p < r)
		\\q is the partition index 	
		q = randPartition(A, p, r)

		\\seperatly sort elements before and after partition
		randQuicksort(A, p, q - 1)
		randQuicksort(A, q + 1, r)
	return 


randPartition(A, p, r) 
	i = rand(p , r) // random integer between p and r
	swap(A[p], A[r]) // swap corresponding element with last element
	i = p-1 // index the smaller element 
	x = A[r] // set the pivot

	for (p <=r-1)
		//if the element is smaller than the pivot
		if A[p]<=x
			i = i + 1 
			swap(A[i],A[p]) 
	swap(A[i+1],A[r]) 
	return i+1 

kthsmallest(A, k)
	n = len(A)
	A = randQuickSort(A, 0, n-1)
	
	return A[k-1]