
from collections import defaultdict 

#class graph for matrix representation
class Graph: 

	def __init__(self,graph): 
		#xreate residual graph
		self.graph = graph
		self. ROW = len(graph) 
		

	# using BFS we will check if there is a path from source to sink,
	# within our residual graph G
	def BFS(self,s, t, parent): 

		# create boolean array (visited) and
		# initially mark all the vertices as false or unvisted
		visited = [False] * (len(self.graph)) 

		# this will be our queue for bfs
		queue = [] 
		
		# Mark the given node as true 
		# or visited and enqueue it 
		queue.append(s) 
		visited[s] = True

		while queue: 

			# Dequeue vertex from queue
			s = queue.pop(0) 

			# enque through all the vertices within the neighboring visited node s
			# using our boolean array we traverse through the node,weight
			for i,w in enumerate(self.graph[s]): 
			    if visited[i] == False and w > 0: 
			        #only count the vertices that are in range of k
			        queue.append(i) 
			        visited[i] = True
			        #update parent node to current visited
			        parent[i] = s
		return True if visited[t] else False
	
	# Implement Ford Fulkerson algorithm to find max flow in graph from source 's' to sink 't'
	def FordFulkerson(self, source, sink): 

		parent = [False]*(self.ROW) 
		
		#our max flow is initially 0
		mflow = 0 

		# while there is an augmented path within the graph
		while self.BFS(source, sink, parent) : 

			# set arbituaraly large value for path
			path = 10000
			
			#set variable for sink to update array
			s = sink 
			
			#while the sink is NOT the source
			while(s != source): 
				#find augmented path using BFS
				path = min (path, self.graph[parent[s]][s]) 
				s = parent[s] 

			# update residual capacities of the edges and reverse edges along the path 
			v = sink 
			while(v != source): 
				u = parent[v] 
				#decrease capacity u -> v
				self.graph[u][v] -= path 
				#increase capacity v -> u
				self.graph[v][u] += path 
				#update node
				v = parent[v] 
				
			#increase maxflow
			mflow += path

		#return maxflow
		return mflow 


# graph created based on my answer03 (a) 

graph = [[0, 3, 2, 0, 0, 0], 
		[0, 0, 1, 3, 4, 0], 
		[0, 0, 0, 0, 2, 0], 
		[0, 0, 0, 0, 0, 2], 
		[0, 0, 0, 0, 0, 3], 
		[0, 0, 0, 0, 0, 0]] 

g = Graph(graph) 

source = 0; sink = 5

maxflow = g.FordFulkerson(source, sink)
print ("Maximum flow is: ", maxflow) 

